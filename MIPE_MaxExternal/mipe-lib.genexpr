/* 1D Mass-Interaction Physics Library for gen~ codebox 
 * Defines basic material and link behaviours for simulation of vibratory deformations 
 *
 * Author: James Leonard
 * james.leonard [at] gipsa-lab.fr 
 *
 *
 * Types:

	Material elements:
		mass
		osc
		ground
		
	Link Elements:
		spring
		damper
		spring_damper
		detent
		nlSpring
		nlPick
		nlBow
	
	Other:
		Input / output elements
 *
 */


/* 1D Punctual mass algorithm */

mass(m, x, xr, f){
	newPos = f / m + 2 * x - xr;
	xr = fixdenorm(x);
	x = fixdenorm(newPos);
	f = 0;
	return x,xr,f;
}


/* 1D Punctual mass algorithm */

mass_gravity(m,g,x, xr, f){
	newPos = (f+g) / m + 2 * x - xr;
	xr = fixdenorm(x);
	x = fixdenorm(newPos);
	f = 0;
	return x,xr,f;
}

/* 1D Integrated mass-spring-damper-ground oscillaor algorithm */

osc(m, k, z, x, xr, f){
	invM = 1/m;
	newPos = f * invM + (2 - (k+z)*invM) * x + (z * invM) * xr;
	xr = fixdenorm(x);
	x = fixdenorm(newPos);
	f = 0;
	return x,xr,f;
}

/* 1D ground (fixed point) algorithm */

ground(x){
	return x,x,0;
}

/* 1D Spring Interaction algorithm */

spring(k, x1, x2){
	f = k * (x1 - x2);
	return -f,f;
}

/* 1D Damper Interaction algorithm */

damper(z, x1, x1r, x2, x2r){
	f = z * ((x1-x1r) - (x2-x2r));
	return -f,f;
}


/* 1D Spring-Damper Interaction algorithm */

spring_damper(k, z, x1, x1r, f1, x2, x2r, f2){
	f = k * (x1 - x2) + z * ((x1-x1r) - (x2-x2r)) ;
	f1 -= f;
	f2 += f;
	return f1,f2;
}


/* 1D Spring-Damper Interaction algorithm */

nl_spring_damper(k, q, z, x1, x1r, f1, x2, x2r, f2){
	dist = (x1 - x2);
	f = k * dist + q * (dist*dist*dist) + z * ((x1-x1r) - (x2-x2r)) ;
	f1 -= f;
	f2 += f;
	return f1,f2;
}


/* 1D Detent (conditional Spring-Damper) Interaction algorithm */

detent(k, z, thresh, x1, x1r, f1, x2, x2r, f2){
	f = k * (x1 - x2) + z * ((x1-x1r) - (x2-x2r)) ;
	if ((x1 - x2) > thresh)
		f = 0;
	f1 -= f;
	f2 += f;
	return f1,f2;
}

/* 1D non-linear picking Interaction algorithm */

nlPluck(nlK, nlscale, x1, f1, x2, f2){
	f = 0.;
	deltapos = (x1 - x2);
	if(abs(deltapos) > nlscale)  {f = 0.;}
	else {f = nlK * deltapos;
	if(abs(deltapos) > (nlscale * 0.5))  {
		f = nlK * (sign(deltapos) * (nlscale * 0.5) - deltapos);
		}
	}
	f1 -= f;
	f2 += f;
	return f1,f2;
}

/* 1D non-linear bowing Interaction algorithm */
/* Note: fixed slope parameters for now, could be modified in future */

nlBow(nlZ, nlscale, x1, x1r, f1, x2, x2r, f2){
	f = 0.;
	speed = ((x1-x1r) - (x2-x2r));
	if(abs(speed) < (nlscale / 3.))  {
		f = nlZ * speed ;
	}
	else if(abs(speed) < nlscale)  {
		if(speed > 0) 
			{f = (nlscale / 3.) * nlZ + (-nlZ/4.) * speed ;}
		else
			{ f =  - (nlscale / 3.) * nlZ + (-nlZ/4.) * speed ;}
	}
	else f = 0.;
	f1 -= f;
	f2 += f;
	return f1,f2;
}
